name: Deploy Apigee Proxy

on: [push, pull_request, workflow_dispatch]

env:
  GCP_SA_CREDS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GCP_SA: ${{ vars.GCP_SA }}
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  PROXY_NAME: ${{ vars.PROXY_NAME }}
  APIGEE_ENV: ${{ vars.APIGEE_ENV }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build_Test_Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      #Get GCP Auth TOKEN
      - name: 'Get Auth TOKEN'
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=$(echo $GCP_SA_CREDS)
          echo ${GOOGLE_APPLICATION_CREDENTIALS} > creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=creds.json
          gcloud config set project $GCP_PROJECT_ID
          gcloud config set account $GCP_SA
          gcloud auth login --cred-file=creds.json
          export TOKEN=$(gcloud auth print-access-token)
          echo "TOKEN=$TOKEN" >> "$GITHUB_ENV"
      #Static code analysis
      - name: 'Static Code Analysis'
        run: |
          npm install -g apigeelint
          apigeelint -f table.js --profile apigeex -s ./apiproxy

      # Deploy Proxy
      - name: 'Deploy Api Proxy to Apigee'
        run: mvn -Pgoogleapi -Pdeployonly install -Dapigee.config.options=create -DproxyName=$PROXY_NAME -Denv=$APIGEE_ENV -Dorg=$GCP_PROJECT_ID -Dtoken=$TOKEN
      
      # Unit test with Cucuber.js and Gherkin
      - name: 'Unit Tests with Cucuber.js and Gherkin'
        run: |
          npm -v
          cd api_everardoproxy_mocks
          npm run init-api
          npm run test
          export COUNT_FAILED=$(grep -o -i failed tests/features/resultados/cucumber_report.json| wc -l)
          echo "COUNT_FAILED_SCENARIOS=$COUNT_FAILED" >> "$GITHUB_ENV"
          echo "=======Info: Found $COUNT_FAILED erros on Unit Test"

      #Conditional undeploy
      - name: 'Conditional Undeploy'
        run: |
          if [ $COUNT_FAILED_SCENARIOS -gt 0 ]; then 
            gcloud apigee apis describe everardoproxy-v1 --format=json > describeResp.json
            export REVISION=$(python3 ./getPreviousProxyRevision.py describeResp.json)
            echo "=======Info: Undeploying latest revision due to failed scenarios in Unit Test Report"
            gcloud apigee apis undeploy --environment=$APIGEE_ENV --api=$PROXY_NAME
            echo "=======Info: Deploying previuos stable revision: $REVISION"
            gcloud apigee apis deploy $REVISION --environment=$APIGEE_ENV --api=$PROXY_NAME
          fi
          if [ $COUNT_FAILED_SCENARIOS == 0 ]; then 
            echo "=======Info: Nothing to UNDEPLOY, due to SUCCESSFULLY result on Unit Test Report"
          fi